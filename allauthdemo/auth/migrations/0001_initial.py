# Generated by Django 3.0.5 on 2020-05-22 16:23

import allauth.socialaccount.fields
import allauthdemo.auth.models
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=40, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=40, null=True, verbose_name='last name')),
                ('display_name', models.CharField(blank=True, max_length=14, null=True, verbose_name='display name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'auth_user',
                'abstract': False,
            },
            managers=[
                ('objects', allauthdemo.auth.models.MyUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('logo', models.URLField(null=True)),
                ('website', models.URLField(null=True)),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='last modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
            ],
            options={
                'verbose_name': 'Brand',
                'verbose_name_plural': 'Brands',
            },
        ),
        migrations.CreateModel(
            name='Local_Product',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('integration_id', models.CharField(help_text='id from the integration provider', max_length=100, null=True)),
                ('available', models.BooleanField(default=True)),
                ('sort_order', models.IntegerField(default=1)),
                ('name', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=200, null=True)),
                ('price', models.CharField(max_length=200, null=True)),
                ('price_min', models.FloatField(max_length=8, null=True)),
                ('price_max', models.FloatField(max_length=8, null=True)),
                ('discounted_price', models.CharField(max_length=200, null=True)),
                ('measurement_units', models.CharField(max_length=200, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=200), blank=True, default=list, null=True, size=None)),
                ('primary_image', models.URLField(null=True)),
                ('images', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(null=True), blank=True, default=list, null=True, size=None)),
                ('product_url', models.URLField(null=True)),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='last modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='allauthdemo_auth.Brand')),
            ],
            options={
                'verbose_name': 'Local Product',
                'verbose_name_plural': 'Local Products',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('integration_id', models.CharField(help_text='id from the integration provider', max_length=200, null=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=200, null=True)),
                ('merchant_type', models.CharField(max_length=200, null=True)),
                ('currency', models.CharField(max_length=200, null=True)),
                ('price_category', allauth.socialaccount.fields.JSONField(default=dict, verbose_name='price_category')),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, null=True, size=None)),
                ('online_store', models.BooleanField(default=False)),
                ('offline_store', models.BooleanField(default=True)),
                ('phone_number', models.CharField(max_length=15, null=True)),
                ('street_address_1', models.CharField(max_length=200, null=True)),
                ('street_address_2', models.CharField(max_length=200, null=True)),
                ('post_code', models.CharField(max_length=200, null=True)),
                ('city', models.CharField(max_length=200, null=True)),
                ('country_code', models.CharField(max_length=3, null=True, verbose_name='ISO Country Code')),
                ('latitude', models.FloatField(max_length=200, null=True)),
                ('longitude', models.FloatField(max_length=200, null=True)),
                ('website', models.URLField(null=True)),
                ('instagram', models.URLField(null=True)),
                ('facebook', models.URLField(null=True)),
                ('twitter', models.URLField(null=True)),
                ('operational_times', allauth.socialaccount.fields.JSONField(default=dict, verbose_name='operational_times')),
                ('logo', models.URLField(null=True)),
                ('primary_image', models.URLField(null=True)),
                ('images', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, default=list, null=True, size=None)),
                ('google_place_id', models.CharField(max_length=200, null=True)),
                ('google_place_url', models.URLField(null=True)),
                ('google_rating_value', models.FloatField(max_length=4, null=True)),
                ('google_rating_volume', models.IntegerField(null=True)),
                ('deliveroo_url', models.URLField(null=True)),
                ('deliveroo_rating_value', models.FloatField(max_length=4, null=True)),
                ('deliveroo_rating_volume', models.IntegerField(null=True)),
                ('ubereats_url', models.URLField(null=True)),
                ('ubereats_rating_value', models.FloatField(max_length=4, null=True)),
                ('ubereats_rating_volume', models.IntegerField(null=True)),
                ('website_text', models.TextField(max_length=8192)),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='last modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
            },
        ),
        migrations.CreateModel(
            name='Merchant',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('integration_id', models.CharField(help_text='id from the integration provider', max_length=100, null=True)),
                ('shopping_method', allauth.socialaccount.fields.JSONField(default=dict, verbose_name='shopping_method')),
                ('name', models.CharField(max_length=100, null=True)),
                ('providers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, null=True, size=None)),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='last modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('user', models.ForeignKey(blank=True, default='ADMIN', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'Merchant',
                'verbose_name_plural': 'Merchants',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('avatar_url', models.CharField(blank=True, max_length=256, null=True)),
                ('dob', models.DateField(blank=True, null=True, verbose_name='dob')),
            ],
            options={
                'db_table': 'user_profile',
            },
        ),
        migrations.CreateModel(
            name='Product_Category',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('integration_id', models.CharField(help_text='id from the integration provider', max_length=100, null=True)),
                ('name', models.CharField(max_length=100)),
                ('sort_order', models.IntegerField(default=1)),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='last modified')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('merchant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='allauthdemo_auth.Merchant')),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
            },
        ),
        migrations.CreateModel(
            name='Presence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='allauthdemo_auth.Location')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='allauthdemo_auth.Local_Product')),
            ],
        ),
        migrations.AddField(
            model_name='location',
            name='merchant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='allauthdemo_auth.Merchant'),
        ),
        migrations.AddField(
            model_name='local_product',
            name='category_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='allauthdemo_auth.Product_Category'),
        ),
        migrations.AddField(
            model_name='local_product',
            name='location_ids',
            field=models.ManyToManyField(blank=True, default=None, through='allauthdemo_auth.Presence', to='allauthdemo_auth.Location', verbose_name='present at'),
        ),
        migrations.AddField(
            model_name='local_product',
            name='merchant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='allauthdemo_auth.Merchant'),
        ),
    ]
